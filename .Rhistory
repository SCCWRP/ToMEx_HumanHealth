mutate(life_h_f = factor(case_when(life.stage == "early,f1"~"Early, F1 Generation",
life.stage == "early,f2"~"Early, F2 Generation",
life.stage == "juvenile"~"Juvenile",
life.stage == "adult"~"Adult",
life.stage == "Not Reported"~"Not Reported")))%>% #Renames for widget
mutate(exposure_route_h_f = factor(case_when(exposure.route == "dermal" ~ "Dermal",
exposure.route == "food" ~ "Food",
exposure.route == "gavage" ~ "Gavage",
exposure.route == "gestation" ~ "Gestation",
exposure.route == "gestation,lactation" ~ "Gestation & Lactation",
exposure.route == "inhalation" ~ "Inhalation",
exposure.route == "intratracheal.instillation" ~ "Intratracheal Instillation",
exposure.route == "iv.injection" ~ "IV Injection",
exposure.route ==  "Not Applicable"~"Not Applicable")))
testplot <- ggplot(human_setup, aes(x = dose.mg.mL.nominal, y = shape_h_f)) +
geom_boxplot(alpha = 0.7, aes(color = effect_h_f, fill = effect_h_f)) +
scale_x_log10(breaks = c(0.00000001, 0.000001, 0.0001, 0.01, 1, 100),
labels = c(0.00000001, 0.000001, 0.0001, 0.01, 1, 100)) +
scale_color_manual(values = c("#A1CAF6", "#4C6FA1")) +
scale_fill_manual(values = c("#A1CAF6", "#4C6FA1")) +
theme_classic() +
theme(text = element_text(size=18),
legend.position = "right") +
labs(x = "Concentration (mg/mL)",
y = "Size",
color = "Effect?",
fill = "Effect?")
testplot
View(human_v1)
library(tidyverse) #General everything
library(RColorBrewer) #plot colors
library(ggplot2) #General plotting
library(ggrepel) #For adding text labels that repel away from data points
library(calecopal) #Color palette
library(shiny) #Runs shiny
library(shinythemes) #Shiny theme for the page
library(shinyWidgets) #Widgets
library(scales) #SSD - Use the percent format
library(reshape2) #Overview tab - melts bars together
library(ssdtools) #SSD package
library(DT) #Build HTML data tables
library(plotly) #Make plots interactive
library(viridis) #Colors
library(scales) #To use "percent" function
library(shinyjs) #Exploration tab - reset button
human <- read_csv("Humans_Clean_Final.csv", guess_max = 10000)
human_v1 <- human %>% # start with original dataset
# full dataset filters.
mutate(effect_h_f = factor(case_when(effect == "Y" ~ "Yes",
effect == "N" ~ "No"),
levels = c("No", "Yes"))) %>%
# removing NAs to make data set nicer
replace_na(list(size.category = 0, shape = "Not Reported", polymer = "Not Reported", exposure.route = "Not Applicable"))
human_setup <- human_v1 %>% # start with original dataset
mutate(size_h_f = factor(case_when(
size.category == 1 ~ "1nm < 100nm",
size.category == 2 ~ "100nm < 1µm",
size.category == 3 ~ "1µm < 100µm",
size.category == 4 ~ "100µm < 1mm",
size.category == 0 ~ "Not Reported"),
levels = c("1nm < 100nm", "100nm < 1µm", "1µm < 100µm", "100µm < 1mm", "Not Reported"))) %>% # creates new column with nicer names and order by size levels.
# shape category data tidying.
mutate(shape_h_f = factor(case_when(
shape == "fragment" ~ "Fragment",
shape == "sphere" ~ "Sphere"),
# shape == NA ~ "Not Reported"),
levels = c("Fragment", "Sphere", "Not Reported"))) %>% # order our different shapes.
# polymer category data tidying.
mutate(poly_h_f = factor(case_when(
polymer == "PA" ~ "Polyamide",
polymer == "PE" ~ "Polyethylene",
polymer == "PMMA" ~ "Polymethylmethacrylate",
polymer == "PP" ~ "Polypropylene",
polymer == "PS" ~ "Polystyrene",
polymer == "PUR" ~ "Polyurathane",
polymer == "PVC" ~ "Polyvinylchloride",
polymer == "TR" ~ "Tire Rubber"))) %>%
# taxonomic category data tidying.
mutate(lvl1_h_f = factor(case_when(lvl1 == "alimentary.excretory" ~ "Alimentary, Excretory",
lvl1 == "behavioral.sense.neuro" ~ "Behavioral, Sensory, Neurological",
lvl1 == "cell.growth.proliferation" ~ "Cell Growth and Proliferation",
lvl1 == "cell.morphology.structure" ~ "Cell Morphology and Structure",
lvl1 == "circulatory" ~ "Circulatory",
lvl1 == "fitness" ~ "Fitness",
lvl1 == "immune" ~ "Immune",
lvl1 == "metabolism" ~ "Metabolism",
lvl1 == "microbiome" ~ "Microbiome",
lvl1 == "respiratory" ~ "Respiratory",
lvl1 == "stress" ~ "Stress"))) %>% # creates new column with nicer names.
# Level 2 Data tidying
mutate(lvl2_h_f = factor(case_when(lvl2 == "actinobacteria" ~ "Actinobacteria",
lvl2 == "amino.acid.metabolism" ~ "Amino Acid Metabolism",
lvl2 == "apoptosis.cell.cycle"~"Apoptosis and Cell Cycle",
lvl2 == "bacteriodetes"~ "Bacteriodetes",
lvl2 == "bile.acid" ~ "Bile Acid",
lvl2 == "body.condition"~"Body Condition",
lvl2 == "carb.metabolism"~"Carb Metabolism",
lvl2 == "cell.aggregation"~"Cell Aggregation",
lvl2 == "cell.membrane"~"Cell Membrane",
lvl2 == "circulatory"~"Circulatory",
lvl2 == "complement"~"Complement",
lvl2 == "coordination"~"Coordination",
lvl2 == "cytotoxicity"~"Cytotoxicity",
lvl2 == "development" ~ "Development",
lvl2 == "digestive.tract.histo"~"Digestive Tract Histological Abnormalities",
lvl2 == "diversity"~ "Diversity",
lvl2 == "dna.damage" ~ "DNA Damage",
lvl2 == "energy.metabolism" ~ "Energy Metabolism",
lvl2 == "exploration" ~ "Exploration",
lvl2 == "firmicutes"~ "Firmicutes",
lvl2 == "gen.stress" ~ "General Stress",
lvl2 == "hemolysis" ~ "Hemolysis",
lvl2 == "immune.cells"~"Immune Cells",
lvl2 == "immune.other"~"Immune Other ",
lvl2 == "inflammation" ~ "Inflammation",
lvl2 == "intestinal.inflammation" ~ "Intestinal Inflammation",
lvl2 == "intestinal.ion.transport" ~ "Intestinal Ion Transport",
lvl2 == "intestinal.muscus.secretion" ~ "Intestinal Mucus Secretion",
lvl2 == "intestinal.permeability" ~ "Intestinal Permeability",
lvl2 == "intestinal.tight.junctions" ~ "Intestinal Tight Junctions",
lvl2 == "kidney.histo"~"Kidney Histological abnormalities",
lvl2 == "lipid.metabolism"~"Lipid Metabolism",
lvl2 == "liver.histo"~"Liver Histological Abnormalities",
lvl2 == "locomotion"~"Locomotion",
lvl2 == "lungs.histo" ~ "Lung Histological Abnormalities",
lvl2 == "lysosome" ~ "Lyosome",
lvl2 == "melainabacteria" ~ "melainabacteria",
lvl2 == "morphology.gen" ~ "General Morphology",
lvl2 == "mortality"~"Mortality",
lvl2 == "nervous.system"~"Nervous System",
lvl2 == "oxidative.stress"~"Oxidative Stress",
lvl2 == "patescibacteria" ~ "Patescibacteria",
lvl2 == "permeability" ~ "Permeability",
lvl2 == "proliferation" ~ "Proliferation",
lvl2 == "proteobacteria"~"Protebacteria",
lvl2 == "respiration"~"Respiration",
lvl2 == "spleen.histo" ~ "Spleen Histological Abnormalities",
lvl2 == "tenericutes" ~ "Tenericutes",
lvl2 == "thyroid" ~ "Thyroid",
lvl2 == "verrucomicrobiae" ~ "Verrucomicrobiae",
lvl2 == "vision" ~ "Vision"))) %>% #Renames for widget
mutate(bio_h_f = factor(case_when(bio.org == "cell"~"Cell", #Bio Org Data Tidying
bio.org == "organism"~"Organism",
bio.org == "subcell"~"Subcell",
bio.org == "tissue" ~ "Tissue")))%>%
mutate(vivo_h_f = factor(case_when(invitro.invivo == "invivo"~"In Vivo",
invitro.invivo == "invitro"~"In Vitro")))%>% ##Renames for widget
mutate(life_h_f = factor(case_when(life.stage == "early,f1"~"Early, F1 Generation",
life.stage == "early,f2"~"Early, F2 Generation",
life.stage == "juvenile"~"Juvenile",
life.stage == "adult"~"Adult",
life.stage == "Not Reported"~"Not Reported")))%>% #Renames for widget
mutate(exposure_route_h_f = factor(case_when(exposure.route == "dermal" ~ "Dermal",
exposure.route == "food" ~ "Food",
exposure.route == "gavage" ~ "Gavage",
exposure.route == "gestation" ~ "Gestation",
exposure.route == "gestation,lactation" ~ "Gestation & Lactation",
exposure.route == "inhalation" ~ "Inhalation",
exposure.route == "intratracheal.instillation" ~ "Intratracheal Instillation",
exposure.route == "iv.injection" ~ "IV Injection",
exposure.route ==  "Not Applicable"~"Not Applicable")))
testplot <- ggplot(human_setup, aes(x = dose.mg.mL.nominal, y = vivo_h_f)) +
geom_boxplot(alpha = 0.7, aes(color = effect_h_f, fill = effect_h_f)) +
scale_x_log10(breaks = c(0.00000001, 0.000001, 0.0001, 0.01, 1, 100),
labels = c(0.00000001, 0.000001, 0.0001, 0.01, 1, 100)) +
scale_color_manual(values = c("#A1CAF6", "#4C6FA1")) +
scale_fill_manual(values = c("#A1CAF6", "#4C6FA1")) +
theme_classic() +
theme(text = element_text(size=18),
legend.position = "right") +
labs(x = "Concentration (mg/mL)",
y = "Size",
color = "Effect?",
fill = "Effect?")
testplot
runApp('app_humansonly.R')
runApp('app_humansonly.R')
runApp('app_humansonly.R')
runApp('app_humansonly.R')
library(shiny); runApp('app_humansonly.R')
runApp('app_humansonly.R')
runApp('app_humansonly.R')
runApp('app_humansonly.R')
runApp('app_humansonly.R')
library(shiny); runApp('app_humansonly.R')
runApp('app_humansonly.R')
runApp('app_humansonly.R')
runApp('app_humansonly.R')
runApp('app_humansonly.R')
runApp('app_humansonly.R')
runApp('app_humansonly.R')
<<<<<<< HEAD
library(shiny); runApp('app_humansonly.R')
=======
runApp('app_humansonly.R')
library(shiny); runApp('app_humansonly.R')
library(shiny); runApp('app_humansonly.R')
library(shiny); runApp('app_humansonly.R')
runApp('app_humansonly.R')
runApp('app_humansonly.R')
runApp('app_humansonly.R')
library(shiny); runApp('app_humansonly.R')
rsconnect::deployApp()
runApp()
rsconnect::deployApp()
setAccountInfo()
rsconnect::setAccountInfo()
rsconnect::setAccountInfo(name='sccwrp',
token='FCCB85EA267A9C55849FEC91396D0DA7',
secret='<SECRET>')
rsconnect::setAccountInfo(name='sccwrp',
token='436C1B0DCD3A5F7274BAC21E4CAF7DA0',
secret='<SECRET>')
rsconnect::setAccountInfo(name='sccwrp',
token='2F1A5CC01EC36337CB7D7FE893B536EC',
secret='<SECRET>')
rsconnect::setAccountInfo(name='sccwrp',
token='2F1A5CC01EC36337CB7D7FE893B536EC',
secret='rHWmwwIUODfHazhqOJ70gWdXXMSFEiMu1RzcSfiJ')
rsconnect::deployApp()
>>>>>>> cd7d4e413273922ac24d70837c19cb5ea08d235c
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
library(tidyverse)
library(palmerpenguins) #contains the penguin data!
library(ggbeeswarm) #cool data viz to reduce overplotting
penguins
penguins <- palmerpenguins::penguins %>%
rename(flipper = flipper_length_mm, bill_length = bill_length_mm, bill_depth = bill_depth_mm) %>%
mutate(mass_kg = body_mass_g/1000, bill_ratio = bill_length/bill_depth) %>%
na.omit()
ggplot(penguins, aes(x = mass_kg, y = flipper))+
geom_point()
#Option #1: open boxes, data points shown
ggplot(penguins, aes(x = species, y = mass_kg, color = sex))+
geom_boxplot(width = 0.6, size = 1)+
geom_point(position = position_dodge(0.6), size = 2, alpha = 0.6)+
scale_color_manual(values = c("#EE6C00FF", "#00838EFF"),labels = c("Female", "Male"))+
theme_classic()+
scale_y_continuous(limits = c(2,6),breaks = c(2,3,4,5,6))+
labs(x = "", y = "Mass (kg)")+
theme(axis.text.y=element_text(size=20, color= 'black'),
axis.text.x=element_text(size=20, color= 'black'),
axis.line.y=element_line(color = 'black',size=0.5),
axis.line.x=element_line(color = 'black',size=0.5),
axis.ticks.y=element_line(size=0.5),
axis.ticks.x=element_line(size=0),
axis.line = element_line(colour = "black"),
axis.title.y=element_text(size=20),
axis.title.x=element_text(size=20),
legend.text = element_text(size = 18),
legend.title = element_blank())
#Option #2: filled boxes, no data points
ggplot(penguins, aes(x = species, y = mass_kg, fill = sex))+
geom_boxplot(width = 0.6, size = 1)+
theme_classic()+
scale_fill_manual(values = c("#EE6C00FF", "#00838EFF"), labels = c("Female", "Male"))+
scale_y_continuous(limits = c(2,6.5),breaks = c(2,3,4,5,6))+
labs(y = "Mass (kg)", x = "")+
stat_compare_means(method = "t.test", label = "p.format")+
theme(axis.text.y=element_text(size=20, color= 'black'),
axis.text.x=element_text(size=20, color= 'black'),
axis.line.y=element_line(color = 'black',size=0.5),
axis.line.x=element_line(color = 'black',size=0.5),
axis.ticks.y=element_line(size=0.5),
axis.ticks.x=element_line(size=0),
axis.line = element_line(colour = "black"),
axis.title.y=element_text(size=20),
axis.title.x=element_text(size=20),
legend.text = element_text(size = 18),
legend.title = element_blank())
penguin_means <- penguins %>%
group_by(species, year) %>%
summarise(mean_mass = mean(mass_kg), mean_flipper= mean(flipper), mean_bill_length = mean(bill_length), sd_mass = sd(mass_kg), sem = sd_mass/sqrt(n()))
ggplot(penguin_means)+
geom_line(aes(x = year, y = mean_mass, color = species), size =1)+
geom_pointrange(aes(x = year, y = mean_mass, ymin = mean_mass - sem, ymax = mean_mass + sem, color = species), size = 1)+
#geom_hline(yintercept = 4.5, linetype = "dashed")+ #if you want to add horizontal or vertical lines to indicate means or asymptotes
#geom_vline(xintercept = 2008, color = "red")+
theme_classic()+
labs(y = "Body Mass (kg)", x = "Year Sampled")+
scale_x_continuous(limits = c(2007, 2009), breaks = c(2007, 2008, 2009))+
scale_color_manual(values = c("darkorange", "darkorchid", "cyan4"))+
theme(axis.text.y=element_text(size=20, color= 'black'),
axis.text.x=element_text(size=20, color= 'black'),
axis.line.y=element_line(color = 'black',size=0.5),
axis.line.x=element_line(color = 'black',size=0.5),
axis.ticks.y=element_line(size=0.5),
axis.ticks.x=element_line(size=0),
axis.line = element_line(colour = "black"),
axis.title.y=element_text(size=20),
axis.title.x=element_text(size=20),
legend.text = element_text(size = 18),
legend.title = element_blank())
library(patchwork)
plot2 <- ggplot(penguins, aes(x = species, y = bill_ratio, fill = sex))+
geom_boxplot()+
theme_classic()+
theme(legend.position = "none")
ggplot(penguins, aes(x = bill_length, y = bill_depth, color = species))+
geom_point(alpha = 0.8, size = 2)+
theme_classic()+
scale_color_manual(values = c("darkorange", "darkorchid", "cyan4"))+
stat_smooth(method = "lm", se = FALSE, size = 1.5)+
inset_element(plot2, 0.6, 0.6, 1, 1, align_to = "full")
#10 ggbeeswarm!
library(ggbeeswarm)
ggplot(penguins, aes(x = species, y = flipper, color = species))+
geom_quasirandom(method = "frowney", dodge.width = 1, varwidth = TRUE,alpha = 0.8, size = 2)+ #varwidth adjusts width dynamically, dodge width reduces overplotting, frowney causes banding
geom_beeswarm() + #alternative geom
theme_classic()+
labs(y = "Flipper Length (mm)", x = "Species")+
scale_y_continuous(limits = c(160, 240), breaks = c(160, 180, 200, 220, 240))+
scale_color_manual(values = c("darkorange", "darkorchid", "cyan4"))+
theme(axis.text.y=element_text(size=20, color= 'black'),
axis.text.x=element_text(size=20, color= 'black'),
axis.line.y=element_line(color = 'black',size=0.5),
axis.line.x=element_line(color = 'black',size=0.5),
axis.ticks.y=element_line(size=0.5),
axis.ticks.x=element_line(size=0),
axis.line = element_line(colour = "black"),
axis.title.y=element_text(size=20),
axis.title.x=element_text(size=20),
legend.text = element_text(size = 18),
legend.title = element_blank())
#9. Customizing font sizes using the all-powerful theme() function. Make sure this comes AFTER theme_classic, because you are modifying components of this theme
ggplot(penguins, aes(x = mass_kg, y = flipper, color = species))+
geom_point(alpha = 0.8, size = 2)+
theme_classic()+
labs(y = "Flipper Length (mm)", x = "Body Mass (kg)")+
scale_y_continuous(limits = c(160, 240), breaks = c(160, 180, 200, 220, 240))+
scale_x_continuous(limits = c(2.5,6.5))+
scale_color_manual(values = c("darkorange", "darkorchid", "cyan4"))+
stat_smooth(method = "lm", se = FALSE, size = 1.5)+
stat_cor(show.legend = FALSE)+
theme(axis.text.y=element_text(size=20, color= 'black'),
axis.text.x=element_text(size=20, color= 'black'),
axis.line.y=element_line(color = 'black',size=0.5),
axis.line.x=element_line(color = 'black',size=0.5),
axis.ticks.y=element_line(size=0.5),
axis.ticks.x=element_line(size=0),
axis.line = element_line(colour = "black"),
axis.title.y=element_text(size=20),
axis.title.x=element_text(size=20),
legend.text = element_text(size = 18),
legend.title = element_blank())
#10 ggbeeswarm!
library(ggbeeswarm)
ggplot(penguins, aes(x = species, y = flipper, color = species))+
geom_quasirandom(method = "frowney", dodge.width = 1, varwidth = TRUE,alpha = 0.8, size = 2)+ #varwidth adjusts width dynamically, dodge width reduces overplotting, frowney causes banding
geom_beeswarm() + #alternative geom
theme_classic()+
labs(y = "Flipper Length (mm)", x = "Species")+
scale_y_continuous(limits = c(160, 240), breaks = c(160, 180, 200, 220, 240))+
scale_color_manual(values = c("darkorange", "darkorchid", "cyan4"))+
theme(axis.text.y=element_text(size=20, color= 'black'),
axis.text.x=element_text(size=20, color= 'black'),
axis.line.y=element_line(color = 'black',size=0.5),
axis.line.x=element_line(color = 'black',size=0.5),
axis.ticks.y=element_line(size=0.5),
axis.ticks.x=element_line(size=0),
axis.line = element_line(colour = "black"),
axis.title.y=element_text(size=20),
axis.title.x=element_text(size=20),
legend.text = element_text(size = 18),
legend.title = element_blank())
ggplot(penguins, aes(x = species, y = flipper, color = species))+
#geom_quasirandom(method = "frowney", dodge.width = 1, varwidth = TRUE,alpha = 0.8, size = 2)+ #varwidth adjusts width dynamically, dodge width reduces overplotting, frowney causes banding
geom_beeswarm() + #alternative geom
theme_classic()+
labs(y = "Flipper Length (mm)", x = "Species")+
scale_y_continuous(limits = c(160, 240), breaks = c(160, 180, 200, 220, 240))+
scale_color_manual(values = c("darkorange", "darkorchid", "cyan4"))+
theme(axis.text.y=element_text(size=20, color= 'black'),
axis.text.x=element_text(size=20, color= 'black'),
axis.line.y=element_line(color = 'black',size=0.5),
axis.line.x=element_line(color = 'black',size=0.5),
axis.ticks.y=element_line(size=0.5),
axis.ticks.x=element_line(size=0),
axis.line = element_line(colour = "black"),
axis.title.y=element_text(size=20),
axis.title.x=element_text(size=20),
legend.text = element_text(size = 18),
legend.title = element_blank())
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?if
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
study_r
runApp()
runApp()
study_r<-xtabs(~exposure.category +effect,aoc)%>%
filter(effect %in% c("Y","N"))
study_r<-xtabs(~exposure.category +effect, aoc)%>%
filter(effect %in% c("Y","N"))
study_r<-xtabs(~shape +effect, aoc)%>%
filter(effect %in% c("Y","N"))
study_r<-xtabs(~shape +effect, aoc)%>%
filter(effect %in% c("Y","N"))
runApp()
runApp()
