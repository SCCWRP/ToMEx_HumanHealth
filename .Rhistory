shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("shinyWidgets")
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
view(aoc_filter)
view("aoc_filter")
shiny::runApp()
view("aoc_y")
view(aoc_y)
# Load finalized dataset.
aoc <- read_csv("AquaticOrganisms_Clean_final.csv", guess_max = 10000)
# Add log transformed concentration columns for easier plotting below.
aoc$log_dose.mg.L <- log10(aoc$dose.mg.L)
aoc$log_dose.particles.mL <- log10(aoc$dose.particles.mL)
# Add factor and releved effects column.
aoc$effect_f <- factor(aoc$effect, levels = c("Y", "N"))
# Master dataset for scatterplots - for Heili's tab.
aoc_x <- aoc %>% # start with original dataset
# full dataset filters.
filter(effect == "Y") %>% # only includes those datapoints with demonstrated effects.
# size category data tidying.
mutate(size.category.noNA = replace_na(size.category, 0)) %>% # replaces NA with 0 so we can better relabel it.
mutate(size_cat = case_when(
size.category.noNA == 1 ~ "1nm < 100nm",
size.category.noNA == 2 ~ "100nm < 1µm",
size.category.noNA == 3 ~ "1µm < 100µm",
size.category.noNA == 4 ~ "100µm < 1mm",
size.category.noNA == 5 ~ "1mm < 5mm",
size.category.noNA == 0 ~ "unavailable")) %>% # creates new column with nicer names.
mutate(size_f = factor(size_cat, levels = c("1nm < 100nm", "100nm < 1µm", "1µm < 100µm", "100µm < 1mm", "1mm < 5mm", "unavailable"))) %>% # order our different size levels.
# shape category data tidying.
mutate(shape.noNA = replace_na(shape, "unavailable")) %>% # replaces NAs to better relabel.
mutate(shape_f = factor(shape.noNA, levels = c("fiber", "fragment", "sphere", "unavailable"))) %>% # order our different shapes.
# polymer category data tidying.
mutate(polymer.noNA = replace_na(polymer, "unavailable")) %>% # replaces NA to better relabel.
mutate(poly_f = factor(polymer.noNA, levels = c("BIO", "EVA", "PA", "PC", "PE", "PET", "PLA", "PMMA", "PP", "PS", "PUR", "PVC", "unavailable"))) %>% # order our different polymers.
# taxonomic category data tidying.
mutate(organism.noNA = replace_na(organism.group, "unavailable")) %>% # replaces NA to better relabel.
mutate(org_f = factor(organism.noNA, levels = c("Algae", "Annelida", "Bacteria", "Cnidaria", "Crustacea", "Echinoderm", "Fish", "Insect", "Mollusca", "Nematoda", "Plant", "Rotifera", "unavailable"))) %>% # order our different organisms.
mutate(lvl1_cat = case_when(
lvl1 == "alimentary.excretory" ~ "Alimentary, Excretory",
lvl1 == "behavioral.sense.neuro" ~ "Behavioral, Sensory, Neurological",
lvl1 == "circulatory.respiratory" ~ "Circulatory, Respiratory",
lvl1 == "community" ~ "Community",
lvl1 == "fitness" ~ "Fitness",
lvl1 == "immune" ~ "Immune",
lvl1 == "metabolism" ~ "Metabolism",
lvl1 == "microbiome" ~ "Microbiome",
lvl1 == "stress" ~ "Stress")) %>% # creates new column with nicer names.
mutate(lvl1_f = factor(lvl1_cat)) # order different endpoints.
#filter out terrestrial data
aoc_y <- aoc_x %>%
filter(environment != "Terrestrial") # removes terrestrial data.
View(aoc_y)
View(aoc_y)
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
install.packages("calecopal")
install.packages("calecopal")
shiny::runApp()
remove.packages("calecopal", lib="~/R/win-library/4.0")
install.packages("calecopal")
install.packages("calecopal")
shiny::runApp()
runApp()
install.packages("calecopal")
devtools::install_github("an-bui/calecopal")
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
install.packages("periscope")
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rlang::last_error()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
h3("Contact", align = "center"),
p(align = "center", "For more information about the database or other questions, please contact Dr. Leah Thornton Hampton (leahth@sccwrp.org)."),
br(),
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
install.packages(shinyjs)
install.packages("shinyjs")
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
git clone https://github.com/thomaspark/bootswatch.git
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny); runApp('app_humans.R')
runApp('app_humans.R')
runApp('app_humans.R')
