# Create calibration and validation splits with tidymodels initial_split() function.
set.seed(4)
multiVar_small_log_split <- multiVar_small_log %>%
initial_split(prop = 0.75, strata = invitro.invivo) # splits data into training and testing set.
# Create a training data set with the training() function
# Pulls from training and testing sets created by initial_split()
multiVar_small_log_train <- training(multiVar_small_log_split)
multiVar_small_log_test <- testing(multiVar_small_log_split)
# Create finalized training dataset and include all possible variables.
rf_dat_log <- multiVar_small_log_train %>%
dplyr::select(-effect)
set.seed(2) # assures the data pulled is random, but sets it for the run below (makes outcome stable)
myrf_log <- randomForest(y = rf_dat_log$effect, # dependent variable
x = rf_dat_log %>%
dplyr::select(-effect), # selecting all predictor variables
importance = T, # how useful is a predictor in predicting values (nothing causal)
proximity = T,
ntrees = 100) # 500 trees default.
# Create finalized training dataset and include all possible variables.
rf_dat_log <- multiVar_small_log_train
set.seed(2) # assures the data pulled is random, but sets it for the run below (makes outcome stable)
myrf_log <- randomForest(y = rf_dat_log$effect, # dependent variable
x = rf_dat_log %>%
dplyr::select(-effect), # selecting all predictor variables
importance = T, # how useful is a predictor in predicting values (nothing causal)
proximity = T,
ntrees = 100) # 500 trees default.
myrf_log <- randomForest(y = rf_dat_log$effect, # dependent variable
x = rf_dat_log %>%
dplyr::select(-effect), # selecting all predictor variables
importance = T, # how useful is a predictor in predicting values (nothing causal)
proximity = T,
ntrees = 100) # 500 trees default.
myrf_log # examine the results.
rf_dat_log %>%
dplyr::select(-effect)
myrf_log <- randomForest(y = rf_dat_log$effect, # dependent variable
x = rf_dat_log %>%
dplyr::select(-effect, -effect_10), # selecting all predictor variables
importance = T, # how useful is a predictor in predicting values (nothing causal)
proximity = T,
ntrees = 100) # 500 trees default.
myrf_log # examine the results.
skim(multiVar)
invitro <- multiVar %>%
filter(invitro.invivo == "in vitro") %>%
# filter(!environment == "Terrestrial") %>%
# filter(bio.org == "organism") %>%
# filter(lvl1_f == "Fitness") %>%
# filter(!exposure.route == "food") %>%
dplyr::select(size.length.um.used.for.conversion, dose.particles.L.master, dose.mg.mL.master, particle.volume.um, exposure.duration.d, density.mg.um3, polymer, invitro.invivo, effect) %>%
mutate_if(~is.numeric(.) && (.) > 0, log10) %>%
drop_na()
skim(invitro)
invitro <- multiVar %>%
filter(invitro.invivo == "invitro") %>%
# filter(!environment == "Terrestrial") %>%
# filter(bio.org == "organism") %>%
# filter(lvl1_f == "Fitness") %>%
# filter(!exposure.route == "food") %>%
dplyr::select(size.length.um.used.for.conversion, dose.particles.L.master, dose.mg.mL.master, particle.volume.um, exposure.duration.d, density.mg.um3, polymer, invitro.invivo, effect) %>%
mutate_if(~is.numeric(.) && (.) > 0, log10) %>%
drop_na()
skim(invitro)
invitro <- multiVar %>%
filter(invitro.invivo == "invitro") %>%
# filter(!environment == "Terrestrial") %>%
# filter(bio.org == "organism") %>%
# filter(lvl1_f == "Fitness") %>%
# filter(!exposure.route == "food") %>%
dplyr::select(size.length.um.used.for.conversion, dose.particles.L.master, dose.mg.mL.master, particle.volume.um, exposure.duration.d, density.mg.um3, polymer, effect) %>%
mutate_if(~is.numeric(.) && (.) > 0, log10) %>%
drop_na()
skim(invitro)
exp(1)^7
exp(1)^6
invitro <- multiVar %>%
filter(invitro.invivo == "invitro") %>%
# filter(!environment == "Terrestrial") %>%
# filter(bio.org == "organism") %>%
# filter(lvl1_f == "Fitness") %>%
# filter(!exposure.route == "food") %>%
dplyr::select(size.length.um.used.for.conversion, dose.particles.L.master, dose.mg.mL.master, particle.volume.um, exposure.duration.d, polymer, effect) %>%
mutate_if(~is.numeric(.) && (.) > 0, log10) %>%
drop_na()
skim(invitro)
# Create calibration and validation splits with tidymodels initial_split() function.
set.seed(4)
invitro_split <- invitro %>%
initial_split(prop = 0.75) # splits data into training and testing set.
# default is 3/4ths split (but 75% training, 25% testing).
# Stratification (strata) = grouping training/testing sets by region, state, etc.
# Using the "strata" call ensures the number of data points in the training data is equivalent to the proportions in the original data set. (Strata below 10% of the total are pooled together.)
# Create a training data set with the training() function
# Pulls from training and testing sets created by initial_split()
invitro_train <- training(invitro_split)
invitro_test <- testing(invitro_split)
# Examine the environment to be sure # of observations looks like the 75/25 split. 3199:1066.
# Random forest --
set.seed(2) # assures the data pulled is random, but sets it for the run below (makes outcome stable)
invitrorf <- randomForest(y = invitro_train$effect, # dependent variable
x = invitro_train %>%
dplyr::select(-effect), # selecting all predictor variables
importance = T, # how useful is a predictor in predicting values (nothing causal)
proximity = T,
ntrees = 100) # 500 trees default.
invitrorf # examine the results.
plot(invitrorf)
# model performance appears to improve most at ~75 trees
varImpPlot(invitrorf)
# displays which variables are most important
# helps to winnow down list of predictors
# recommended to weigh left pane more
# right pane also shows how evenly things split based on the list of predictors
# values close to 0 can be dropped, but don't have to be
importance <- invitrorf$importance
View(importance)
# displays the data plotted in the plot above
fitted <- predict(invitrorf, invitro_test[,-6], OOB = TRUE, type ="response")
invitro_test[,-6]
invitro_test[,-8]
invitro_test[,-7]
fitted <- predict(invitrorf, invitro_test[,-7], OOB = TRUE, type ="response")
misClasificError <- mean(fitted != invitro_test$effect)
print(paste('Training Accuracy', 1 - misClasificError))
require(pROC)
predicted <- predict(invitrorf, invitro_test %>%  dplyr::select(-effect),
OOB=TRUE, type= "response")
#Calculate ROC curve
rocCurve.tree <- roc(as.numeric(invitro_test$effect),as.numeric(predicted))
##gplot
# rocks <- roc()
#plot the ROC curve
plot(rocCurve.tree,col=c(4))
invivo <- multiVar %>%
filter(invitro.invivo == "invivo") %>%
# filter(!environment == "Terrestrial") %>%
# filter(bio.org == "organism") %>%
# filter(lvl1_f == "Fitness") %>%
# filter(!exposure.route == "food") %>%
dplyr::select(size.length.um.used.for.conversion, dose.particles.L.master, dose.mg.mL.master, particle.volume.um, exposure.duration.d, polymer, effect) %>%
mutate_if(~is.numeric(.) && (.) > 0, log10) %>%
drop_na()
skim(invivo)
exp(1)^6
# Create calibration and validation splits with tidymodels initial_split() function.
set.seed(4)
invivo_split <- invivo %>%
initial_split(prop = 0.75) # splits data into training and testing set.
# default is 3/4ths split (but 75% training, 25% testing).
# Stratification (strata) = grouping training/testing sets by region, state, etc.
# Using the "strata" call ensures the number of data points in the training data is equivalent to the proportions in the original data set. (Strata below 10% of the total are pooled together.)
# Create a training data set with the training() function
# Pulls from training and testing sets created by initial_split()
invivo_train <- training(invivo_split)
invivo_test <- testing(invivo_split)
# Examine the environment to be sure # of observations looks like the 75/25 split. 3199:1066.
# Random forest --
set.seed(2) # assures the data pulled is random, but sets it for the run below (makes outcome stable)
invivorf <- randomForest(y = invivo_train$effect, # dependent variable
x = invivo_train %>%
dplyr::select(-effect), # selecting all predictor variables
importance = T, # how useful is a predictor in predicting values (nothing causal)
proximity = T,
ntrees = 100) # 500 trees default.
invivorf # examine the results.
plot(invivorf)
# model performance appears to improve most at ~75 trees
varImpPlot(invivorf)
# displays which variables are most important
# helps to winnow down list of predictors
# recommended to weigh left pane more
# right pane also shows how evenly things split based on the list of predictors
# values close to 0 can be dropped, but don't have to be
varImpPlot(invivorf)
# displays which variables are most important
# helps to winnow down list of predictors
# recommended to weigh left pane more
# right pane also shows how evenly things split based on the list of predictors
# values close to 0 can be dropped, but don't have to be
varImpPlot(invitrorf)
all <- multiVar %>%
dplyr::select(size.length.um.used.for.conversion, dose.particles.L.master, dose.mg.mL.master, particle.volume.um, exposure.duration.d, polymer, effect) %>%
mutate_if(~is.numeric(.) && (.) > 0, log10) %>%
drop_na()
skim(all)
# Create calibration and validation splits with tidymodels initial_split() function.
set.seed(4)
all_split <- all %>%
initial_split(prop = 0.75, strata = invitro.invivo) # splits data into training and testing set.
all <- multiVar %>%
dplyr::select(size.length.um.used.for.conversion, dose.particles.L.master, dose.mg.mL.master, particle.volume.um, exposure.duration.d, polymer, effect, invitro.invivo) %>%
mutate_if(~is.numeric(.) && (.) > 0, log10) %>%
drop_na()
skim(all)
# Create calibration and validation splits with tidymodels initial_split() function.
set.seed(4)
all_split <- all %>%
initial_split(prop = 0.75, strata = invitro.invivo) # splits data into training and testing set.
# default is 3/4ths split (but 75% training, 25% testing).
# Stratification (strata) = grouping training/testing sets by region, state, etc.
# Using the "strata" call ensures the number of data points in the training data is equivalent to the proportions in the original data set. (Strata below 10% of the total are pooled together.)
# Create a training data set with the training() function
# Pulls from training and testing sets created by initial_split()
all_train <- training(all_split)
all_test <- testing(all_split)
# Examine the environment to be sure # of observations looks like the 75/25 split. 3199:1066.
# Random forest --
set.seed(2) # assures the data pulled is random, but sets it for the run below (makes outcome stable)
allrf <- randomForest(y = all_train$effect, # dependent variable
x = all_train %>%
dplyr::select(-effect), # selecting all predictor variables
importance = T, # how useful is a predictor in predicting values (nothing causal)
proximity = T,
ntrees = 100) # 500 trees default.
allrf # examine the results.
plot(allrf)
# model performance appears to improve most at ~75 trees
varImpPlot(allrf)
# displays which variables are most important
# helps to winnow down list of predictors
# recommended to weigh left pane more
# right pane also shows how evenly things split based on the list of predictors
# values close to 0 can be dropped, but don't have to be
varImpPlot(allrf)
fitted <- predict(allrf, all_test[,-6], OOB = TRUE, type ="response")
all_test
fitted <- predict(allrf, all_test[,-7], OOB = TRUE, type ="response")
misClasificError <- mean(fitted != all_test$effect)
print(paste('Training Accuracy', 1 - misClasificError))
###invitro
invitropredictions <- as.data.frame(predict(invitrorf, invitro_test[,-6], type = "prob"))
###invitro
invitropredictions <- as.data.frame(predict(invitrorf, invitro_test[,-7], type = "prob"))
# predict class and then attach test class
invitropredictions$predict <- names(invitropredictions)[1:2][apply(invitropredictions[,1:2], 1, which.max)]
invitropredictions$observed <- invitro_test$effect
####invivo
predictions <- as.data.frame(predict(invivorf, invivo_test[,-6], type = "prob"))
####invivo
predictions <- as.data.frame(predict(invivorf, invivo_test[,-7], type = "prob"))
# predict class and then attach test class
predictions$predict <- names(predictions)[1:2][apply(predictions[,1:2], 1, which.max)]
predictions$observed <- invivo_test$effect
head(predictions)
#### all
allpredictions <- as.data.frame(predict(allrf, all_test[,-7], type = "prob"))
# predict class and then attach test class
allpredictions$predict <- names(allpredictions)[1:2][apply(allpredictions[,1:2], 1, which.max)]
allpredictions$observed <- all_test$effect
head(allpredictions)
require(ggdark)
# 1 ROC curve, yes vs no for invitro
roc.invitro <- roc(ifelse(predictions$observed=="Yes", "Yes", "No"), as.numeric(predictions$Yes))
# 1 ROC curve, yes vs no for invitro
roc.invitro <- roc(ifelse(invitropredictions$observed=="Yes", "Yes", "No"), as.numeric(predictions$Yes))
#invivo
roc.invivo <- roc(ifelse(invivopredictions$observed=="Yes", "Yes", "No"), as.numeric(invivopredictions$Yes))
###invitro
invitropredictions <- as.data.frame(predict(invitrorf, invitro_test[,-7], type = "prob"))
# predict class and then attach test class
invitropredictions$predict <- names(invitropredictions)[1:2][apply(invitropredictions[,1:2], 1, which.max)]
invitropredictions$observed <- invitro_test$effect
####invivo
invivopredictions <- as.data.frame(predict(invivorf, invivo_test[,-7], type = "prob"))
# predict class and then attach test class
invivopredictions$predict <- names(predictions)[1:2][apply(predictions[,1:2], 1, which.max)]
invivopredictions$observed <- invivo_test$effect
head(predictions)
#### all
allpredictions <- as.data.frame(predict(allrf, all_test[,-7], type = "prob"))
# predict class and then attach test class
allpredictions$predict <- names(allpredictions)[1:2][apply(allpredictions[,1:2], 1, which.max)]
allpredictions$observed <- all_test$effect
head(allpredictions)
# 1 ROC curve, yes vs no for invitro
roc.invitro <- roc(ifelse(invitropredictions$observed=="Yes", "Yes", "No"), as.numeric(predictions$Yes))
head(invivopredictions)
####invivo
invivopredictions <- as.data.frame(predict(invivorf, invivo_test[,-7], type = "prob"))
invivo_test[,-7]
####invivo
invivopredictions <- as.data.frame(predict(invivorf, invivo_test[,-7], type = "prob"))
invivopredictions
###invitro
invitropredictions <- as.data.frame(predict(invitrorf, invitro_test[,-7], type = "prob"))
invitropredictions
head(allpredictions)
# 1 ROC curve, yes vs no for invitro
roc.invitro <- roc(ifelse(invitropredictions$observed=="Yes", "Yes", "No"), as.numeric(predictions$Yes))
#invivo
roc.invivo <- roc(ifelse(invivopredictions$observed=="Yes", "Yes", "No"), as.numeric(invivopredictions$Yes))
#all
roc.all <- roc(ifelse(allpredictions$observed=="Yes", "Yes", "No"), as.numeric(allpredictions$Yes))
all <- ggroc(roc.all) + labs(title = "invivo and invitro",
subtitle = "Accuracy = 81.7%, n = 1510") + dark_theme_bw()
invitro <- ggroc(roc.invitro, col = "red") + labs(title = "invitro",
subtitle = "Accuracy = 84.8%, n = 883") + dark_theme_bw()
invivo <- ggroc(roc.invivo, col = "blue") + labs(title = "invivo",
subtitle = "Accuracy = 67.3%, n = 452") + dark_theme_bw()
require(gridExtra)
grid.arrange(all, invitro, invivo,
ncol = 4)
invivo <- ggroc(roc.invivo, col = "blue") + labs(title = "invivo",
subtitle = "Accuracy = 67.3%, n = 452") + dark_theme_bw()
#invivo
roc.invivo <- roc(ifelse(invivopredictions$observed=="Yes", "Yes", "No"), as.numeric(invivopredictions$Yes))
require(ggdark)
# 1 ROC curve, yes vs no for invitro
roc.invitro <- roc(ifelse(invitropredictions$observed=="Y", "Y", "N"), as.numeric(predictions$Yes))
#invivo
roc.invivo <- roc(ifelse(invivopredictions$observed=="Y", "Y", "N"), as.numeric(invivopredictions$Yes))
invivopredictions$observed
invivopredictions$observed
###invitro
invitropredictions <- as.data.frame(predict(invitrorf, invitro_test[,-7], type = "prob"))
invitropredictions
# predict class and then attach test class
invitropredictions$predict <- names(invitropredictions)[1:2][apply(invitropredictions[,1:2], 1, which.max)]
invitropredictions$observed <- invitro_test$effect
invitropredictions$observed
head(invitropredictions)
# 1 ROC curve, yes vs no for invitro
roc.invitro <- roc(ifelse(invitropredictions$observed=="Y", "Y", "N"), as.numeric(predictions$Y))
# 1 ROC curve, yes vs no for invitro
roc.invitro <- roc(ifelse(invitropredictions$observed=="Y", "Y", "N"), as.numeric(invitropredictions$Y))
#invivo
roc.invivo <- roc(ifelse(invivopredictions$observed=="Y", "Y", "N"), as.numeric(invivopredictions$Y))
###invitro
invitropredictions <- as.data.frame(predict(invitrorf, invitro_test[,-7], type = "prob"))
# predict class and then attach test class
invitropredictions$predict <- names(invitropredictions)[1:2][apply(invitropredictions[,1:2], 1, which.max)]
invitropredictions$observed <- invitro_test$effect
head(invitropredictions)
####invivo
invivopredictions <- as.data.frame(predict(invivorf, invivo_test[,-7], type = "prob"))
# predict class and then attach test class
invivopredictions$predict <- names(invivopredictions)[1:2][apply(invivopredictions[,1:2], 1, which.max)]
invivopredictions$observed <- invivo_test$effect
head(invivopredictions)
#### all
allpredictions <- as.data.frame(predict(allrf, all_test[,-7], type = "prob"))
# predict class and then attach test class
allpredictions$predict <- names(allpredictions)[1:2][apply(allpredictions[,1:2], 1, which.max)]
allpredictions$observed <- all_test$effect
head(allpredictions)
require(ggdark)
# 1 ROC curve, yes vs no for invitro
roc.invitro <- roc(ifelse(invitropredictions$observed=="Y", "Y", "N"), as.numeric(invitropredictions$Y))
#invivo
roc.invivo <- roc(ifelse(invivopredictions$observed=="Y", "Y", "N"), as.numeric(invivopredictions$Y))
#all
roc.all <- roc(ifelse(allpredictions$observed=="Y", "Y", "N"), as.numeric(allpredictions$Y))
all <- ggroc(roc.all) + labs(title = "invivo and invitro",
subtitle = "Accuracy = 81.7%, n = 1510") + dark_theme_bw()
invitro <- ggroc(roc.invitro, col = "red") + labs(title = "invitro",
subtitle = "Accuracy = 84.8%, n = 883") + dark_theme_bw()
invivo <- ggroc(roc.invivo, col = "blue") + labs(title = "invivo",
subtitle = "Accuracy = 67.3%, n = 452") + dark_theme_bw()
require(gridExtra)
grid.arrange(all, invitro, invivo,
ncol = 4)
grid.arrange(all, invitro, invivo,
ncol = 3)
ggroc(roc.all)
roc.all
all_train
summary(all_train)
roc.invitro
roc.invivo
require(ggdark)
# 1 ROC curve, yes vs no for invitro
roc.invitro <- roc(ifelse(invitropredictions$observed=="Y", "Y", "N"), as.numeric(invitropredictions$Y))
#invivo
roc.invivo <- roc(ifelse(invivopredictions$observed=="Y", "Y", "N"), as.numeric(invivopredictions$Y))
#all
roc.all <- roc(ifelse(allpredictions$observed=="Y", "Y", "N"), as.numeric(allpredictions$Y))
all <- ggroc(roc.all) + labs(title = "invivo and invitro",
subtitle = "Accuracy = 70.8%, n = 1989") + dark_theme_bw()
invitro <- ggroc(roc.invitro, col = "red") + labs(title = "invitro",
subtitle = "Accuracy = 79.7%, n = 754") + dark_theme_bw()
invivo <- ggroc(roc.invivo, col = "blue") + labs(title = "invivo",
subtitle = "Accuracy = 66.7%, n = 452") + dark_theme_bw()
require(gridExtra)
grid.arrange(all, invitro, invivo,
ncol = 3)
roc.all
ggroc(list(roc.invitro, roc.invivo))
ggroc(list(all = roc.all))
ggroc(list(all = roc.all, invitro = roc.invitro, invivo = roc.invivo), aes = c("linetype", "color"))
require(ggsci)
ggroc(list(all = roc.all, invitro = roc.invitro, invivo = roc.invivo), aes = c("linetype", "color")) +
labs(title = "ROC Curves for Mammlian Toxicity RF",
subtitle = "n = 1989") +
scale_color_startrek()+
dark_theme_bw(base_size = 20)
ggroc(list(all = roc.all, invitro = roc.invitro, invivo = roc.invivo), aes = c("linetype", "color")) +
labs(title = "ROC Curves for Mammlian Toxicity RF",
subtitle = "n = 1989") +
scale_color_futurama()+
dark_theme_bw(base_size = 20)
ggroc(list(all = roc.all, invitro = roc.invitro, invivo = roc.invivo), aes = c("linetype", "color")) +
labs(title = "ROC Curves for Mammlian Toxicity RF",
subtitle = "n = 1989") +
scale_color_locuszoom()+
dark_theme_bw(base_size = 20)
ggroc(list(all = roc.all, invitro = roc.invitro, invivo = roc.invivo), aes = c("linetype", "color")) +
labs(title = "ROC Curves for Mammlian Toxicity RF",
subtitle = "n = 1989") +
scale_color_d3()+
dark_theme_bw(base_size = 20)
ggroc(list(all = roc.all, invitro = roc.invitro, invivo = roc.invivo), aes = c("linetype", "color")) +
labs(title = "ROC Curves for Mammlian Toxicity RF",
subtitle = "n = 1989") +
scale_color_JAMA()+
dark_theme_bw(base_size = 20)
ggroc(list(all = roc.all, invitro = roc.invitro, invivo = roc.invivo), aes = c("linetype", "color")) +
labs(title = "ROC Curves for Mammlian Toxicity RF",
subtitle = "n = 1989") +
scale_color_jama()+
dark_theme_bw(base_size = 20)
ggroc(list(all = roc.all, invitro = roc.invitro, invivo = roc.invivo), aes = c("linetype", "color")) +
labs(title = "ROC Curves for Mammlian Toxicity RF",
subtitle = "n = 1989") +
scale_color_nejm()+
dark_theme_bw(base_size = 20)
ggroc(list(all = roc.all, invitro = roc.invitro, invivo = roc.invivo), aes = c("linetype", "color")) +
labs(title = "ROC Curves for Mammlian Toxicity RF",
subtitle = "n = 1989") +
scale_color_tron()+
dark_theme_bw(base_size = 20)
ggroc(list(all = roc.all, invitro = roc.invitro, invivo = roc.invivo), aes = c("linetype", "color")) +
labs(title = "ROC Curves for Mammlian Toxicity RF",
subtitle = "n = 1989") +
scale_color_tron()+
theme(legend.title = element_blank())+
dark_theme_bw(base_size = 20)
ggroc(list(all = roc.all, invitro = roc.invitro, invivo = roc.invivo), aes = c("linetype", "color")) +
labs(title = "ROC Curves for Mammlian Toxicity RF",
subtitle = "n = 1989",
color = "Dataset") +
scale_color_tron()+
theme(legend.title = element_blank())+
dark_theme_bw(base_size = 20)
ggroc(list(all = roc.all, invitro = roc.invitro, invivo = roc.invivo), aes = c("linetype", "color")) +
labs(title = "ROC Curves for Mammlian Toxicity RF",
subtitle = "n = 1989",
color = "Dataset",
linetype = "Dataset") +
scale_color_tron()+
theme(legend.title = element_blank())+
dark_theme_bw(base_size = 20)
ggroc(list(all = roc.all, invitro = roc.invitro, invivo = roc.invivo), aes = c("linetype", "color")) +
labs(title = "ROC Curves for Mammlian Toxicity RF",
subtitle = "n = 1989",
color = "Dataset",
linetype = "Dataset") +
scale_color_tron()+
theme(legend.title = element_blank(),
plot.title.position = element_text(hjust = 0.5))+
dark_theme_bw(base_size = 20)
ggroc(list(all = roc.all, invitro = roc.invitro, invivo = roc.invivo), aes = c("linetype", "color")) +
labs(title = "ROC Curves for Mammlian Toxicity RF",
subtitle = "n = 1989",
color = "Dataset",
linetype = "Dataset") +
scale_color_tron()+
theme(legend.title = element_blank(),
plot.title.position = element_text(hjust = 0.5),
plot.subtitle.position = element_text(hjust = 0.5))+
dark_theme_bw(base_size = 20)
theme(legend.title = element_blank(),
plot.title.position = element_text(hjust = 0.5),
plot.subtitle.position = element_text(hjust = 0.5))
ggroc(list(all = roc.all, invitro = roc.invitro, invivo = roc.invivo), aes = c("linetype", "color")) +
labs(title = "ROC Curves for Mammlian Toxicity RF",
subtitle = "n = 1989",
color = "Dataset",
linetype = "Dataset") +
scale_color_tron()+
dark_theme_bw(base_size = 20) +
theme(legend.title = element_blank(),
plot.title.position = element_text(hjust = 0.5),
plot.subtitle.position = element_text(hjust = 0.5))
ggroc(list(all = roc.all, invitro = roc.invitro, invivo = roc.invivo), aes = c("linetype", "color")) +
labs(title = "ROC Curves for Mammlian Toxicity RF",
subtitle = "n = 1989",
color = "Dataset",
linetype = "Dataset") +
scale_color_tron()+
dark_theme_bw(base_size = 20) +
theme(plot.title.position = element_text(hjust = 0.5),
plot.subtitle.position = element_text(hjust = 0.5))
#theme(plot.title.position = element_text(hjust = 0.5),
#     plot.subtitle.position = element_text(hjust = 0.5))
ggroc(list(all = roc.all, invitro = roc.invitro, invivo = roc.invivo), aes = c("linetype", "color")) +
labs(title = "ROC Curves for Mammlian Toxicity RF",
subtitle = "n = 1989",
color = "Dataset",
linetype = "Dataset") +
scale_color_tron()+
dark_theme_bw(base_size = 20)# +
ggroc(list(all = roc.all, invitro = roc.invitro, invivo = roc.invivo), aes = c("linetype", "color")) +
labs(title = "ROC Curves for Mammlian Toxicity RF",
subtitle = "n = 1989",
color = "Dataset",
linetype = "Dataset") +
scale_color_tron()+
dark_theme_bw(base_size = 20)
require(gridExtra)
grid.arrange(all, invitro, invivo,
ncol = 3)
